/* Name  				: Sricharan Kidambi S
 * Course				: ECEN 5813 - Embedded System Design - Course Project
 * Title				: Huffman Compression and Decompression of Debug Printouts
 * Instructor			: Howdy Pierce
 * Teaching Assistants	: Mukta Darekar, Nimish Bhide
 * File  				: cbfifo.c
 * Date	 				: 05/02/2022
 * Brief 				: Command Processor Statements to print command line results as you require with the help of a command table
 * References			: Code inspired from Howdy Pierce's Lecture on Command Processors.
 * 						  For documentation see command_processor.h
 */
#include "command_processor.h"
#define SPACE_CHARACTER 0x20
#define BACKSPACE 0x08
#define CARRIAGE_RETURN 0x0D
#define NEW_LINE 0x0A
#define BUFFER_SIZE 1024

uint8_t encoder[BUFFER_SIZE];

char *message = "update-alternatives 2021-12-10 11:02:43: run with --install /usr/bin/gnome-www-browser gnome-www-browser /usr/bin/firefox 40";

typedef struct{
	uint8_t message_original_length;
	uint8_t message_encoded_length;
}store_t;

store_t st;
//Call the huffcodes.c functions Externally into this file
extern int huffman_encode(const char *message,uint8_t *buffer,size_t nbytes);
extern int huffman_decode(uint8_t *coded, size_t codedbytes,char *message);
/* Function		:	handle_author
 * Purpose		:	display the author name is the command typed is author
 * return type 	: 	static void
 * Parameters	:	argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void handle_author(int argc,char *argv[]);
/* Function 	: print the original strings
 * Purpose 		: Display the string for which huffman compression and decompression has to be specified.
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void print_original(int argc,char *argv[]);
/* Function 	: print the encoded strings
 * Purpose 		: Print the encoded string to test whether Huffman Encoding is working
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void encoded_string(int argc,char *argv[]);
/* Function 	: print the decoded strings
 * Purpose 		: Print the strings back to test whether huffman decoding is working to perfection.
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void decoded_string(int argc,char *argv[]);
/* Function 	: Analyze the huffman gains
 * Purpose 		: Print the Compression ratio in terms for current message (because KL25Z doesnt take in floats)
 * Additional	: Formula used to find the gains, ((original - length)/original_length) * 100
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void huffman_analyze(int argc,char *argv[]);
/* Function 	: handle help
 * Purpose 		: to display the menu box specified. Prints the third element of the command_table_t data structure
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void handle_help(int argc,char *argv[]);
/* Function 	: handle_other
 * Purpose 		: Just a function to indicate that command table built is a scalable one
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void handle_other(int argc,char *argv[]);
/* Function 	: parse_data
 * Purpose 		: Just to check whether command table is scalable
 * return type	: static void
 * Parameters	: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void parse_data(int argc,char *argv[]);
/* Function : Print Unknown command
 * Purpose  : This function is solely defined to let the user know that the given command is not in the list.
 * 			  a boolean variable is declared and is checking is the command is present. if not it prints the
 * 			  error message stating commands are unknown.
 * returns	: None
 * Parameters: argc (holds the count of arguments passed), argv (holding the array of strings)
 */
static void print_unknown_command(int argc,char *argv[]);

static const command_table_t commands[] = {
		{"author",handle_author,"Author Prints the name of the Author's name\r\n"},
		{"Original",print_original,"Prints the string messages original"},
		{"Encoded",encoded_string,"Prints the Encoded Strings"},
		{"Decoded",decoded_string,"Prints the decoded Strings"},
		{"Analyze",huffman_analyze,"Print the size gains of the huffman algorithm"},
		{"help",handle_help,"prints the description of all the possible commands entered\r\n"},
		{"other",handle_other,"Just to check whether command table is scalable\r\n"},
};

static const int num_commands = sizeof(commands)/sizeof(command_table_t);

static void handle_author(int argc,char *argv[]){
	printf("Sricharan Kidambi \r\n");
}
static void print_original(int argc,char *argv[]){
	printf("\r\n%s",message);
}
static void encoded_string(int argc,char *argv[]){
	int message_encoded_bits = huffman_encode(message,encoder,BUFFER_SIZE);
	st.message_encoded_length = message_encoded_bits;
	printf("\r\n%s",encoder);
}
static void decoded_string(int argc,char *argv[]){
	char result[BUFFER_SIZE];
	int message_decoded_bits = huffman_decode(encoder,st.message_encoded_length,result);
	st.message_original_length = message_decoded_bits;
	assert(strncmp(message,result,strlen(message))==0);
	printf("\r\n%s",result);
}
static void handle_help(int argc,char *argv[]){
	for(int i =0;i < num_commands;i++){
			printf("\r\n%s", commands[i].help_string);
	}
}
static void handle_other(int argc,char *argv[]){
	printf("\r\nYes,Command table is scalable");
}
static void parse_data(int argc,char *argv[]){
	for(int i =0;i < num_commands;i++){
		if(strcasecmp(argv[0],commands[i].name)==0){
			commands[i].handler(argc,argv);
			break;
		}
	}
}
static void huffman_analyze(int argc,char *argv[]){
	uint8_t difference = st.message_original_length - st.message_encoded_length;
	int gain = difference * 100;
	int result = gain/st.message_original_length;
	printf("Huffman Compression and Decompression gains = %d %%",result);
}
static void print_unknown_command(int argc,char *argv[]){
	bool command_present = false;
	for(int i =0;i < num_commands;i++){
		if(strcasecmp(argv[0],commands[i].name)==0){
			command_present = true;
			break;
		}
	}
	if(command_present == false){
		printf("Unknown Command :%s\r\n",argv[0]);
	}
}

void process_command(char *input){
	char *p = input;
	char *end;
	for(end = input;*end != '\0';end++);
	bool in_token = false;
	char *argv[10];
	int argc = 0;
	__builtin_memset(argv,0,sizeof(argv));
	for(p = input;p < end;p++){
		if(in_token){
			if((*p == SPACE_CHARACTER)||(*p == '\r')||(*p == '\0')){
				*p = 0;
				in_token = false;
			}
			else{
				argv[argc] = p;
			}
		}
		else{
			if((*p == SPACE_CHARACTER)||(*p == '\r')||(*p == '\0')){
				*p = 0;
			}
			else{
				argv[argc] = p;
				argc++;
				in_token = true;
			}
		}
	}
	argv[argc] = NULL;
	if(argc == 0)
		return;
	parse_data(argc,argv);
	print_unknown_command(argc,argv);
}

char *accumulate(char *name){
  char ch;
  int i = 0;
  char backup_buffer[MAX_SIZE];
	while(ch != 0x0D){
		while(bufferempty(&cb_RX) == 1);
		dequeue(&cb_RX,&ch,1);
		if(ch == NEW_LINE){
			backup_buffer[i] = '\0';
			break;
		}
		else if(ch == BACKSPACE){
			printf(" \b");
			i--;
		}
		else{
			backup_buffer[i++] = ch;
		}
		putchar(ch);
	}
	__builtin_memcpy(name,backup_buffer,sizeof(backup_buffer));
	return (char *)name;
}
