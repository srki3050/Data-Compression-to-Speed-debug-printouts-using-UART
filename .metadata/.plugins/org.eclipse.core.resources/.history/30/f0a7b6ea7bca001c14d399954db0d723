/*
 * Huffman codes
 *
 * THIS FILE IS AUTO-GENERATED...Do not Edit
 */
#ifndef HUFFCODES_H_
#define HUFFCODES_H_

#include<stdint.h>

typedef struct{
    unsigned char symbol;       //Symbol being Coded
    uint32_t code;              //Binary code for symbol
    int code_bits;              //Number of bits in code
}huffman_code_t;
#define HUFF_CODE_END_SYMBOL '\0'
#define HUFF_CODE_MIN_LENGTH (3)
#define HUFF_CODE_MAX_LENGTH (19)




/* @brief - With the above specified huffman tree, this function writes the algorithm to encode
             every symbol to its corresponding huffman code to send over UART. Called in Sys_write
             system call function, the data is compressed in here.
*  Parameters
*  message - The entire message to be encoded
*  buffer  - A buffer to store the output encoded messages
*  nbytes  - Size of the buffer to ensure that there is no buffer overflow in any given scenario
*  Returns
            The number of bytes successfully encoded
*/
int huffman_encode(const char *message,uint8_t *buffer,size_t nbytes);

/* @brief - Once the huffman encoding is completed perform huffman decoding
*  Parameters
*  coded   					- The buffer which has the compressed bits
*  codebytes    			- size of the encoder buffer
*  resultant_buffer 		- The resultant buffer where you have to store the decoded string
*  Returns
            The number of bytes successfully encoded
*/
int huffman_decode(uint8_t *coded, size_t codedbytes,char *resultant_buffer);


#endif /* HUFFCODES_H_ */
